import { ParsedIntent, TestCase, TestStep } from '../nlp/promptParser';
import { logger } from '../utils/logger';
import Handlebars from 'handlebars';

interface GenerateOptions {
  style: string;
  format: string;
}

/**
 * Generate Mocha test code based on parsed intent
 */
export async function generateMochaTest(
  intent: ParsedIntent,
  options: GenerateOptions
): Promise<string> {
  const { style, format } = options;
  logger.info(`Generating Mocha test with style: ${style}, format: ${format}`);
  
  // Register Handlebars helpers
  Handlebars.registerHelper('eq', function(a, b) {
    return a === b;
  });
  
  // Select the appropriate template based on style and format
  const templateSource = selectMochaTemplate(style, format);
  const template = Handlebars.compile(templateSource);
  
  // Prepare the template data
  const testUrl = intent.url || 'https://example.com';
  
  const testData = {
    url: testUrl,
    testCases: intent.testCases,
    format,
    style,
    usesTypeScript: format === 'typescript',
    date: new Date().toISOString().split('T')[0],
    hasMultipleTestCases: intent.testCases.length > 1,
  };
  
  // Generate code using the template
  return template(testData);
}

/**
 * Select the appropriate template based on style and format
 */
function selectMochaTemplate(style: string, format: string): string {
  if (style === 'bdd' && format === 'typescript') {
    return mochaBddTypeScriptTemplate;
  } else if (style === 'bdd' && format === 'javascript') {
    return mochaBddJavaScriptTemplate;
  } else if (style === 'tdd' && format === 'typescript') {
    return mochaTddTypeScriptTemplate;
  } else {
    // Default to TDD JavaScript
    return mochaTddJavaScriptTemplate;
  }
}

// Templates for Mocha tests
// BDD TypeScript Template
const mochaBddTypeScriptTemplate = `
import { Browser, chromium, Page } from 'playwright';
import { expect } from 'chai';

/**
 * Automated test suite generated by AutoSpectra
 * URL: {{url}}
 * Date: {{date}}
 */

describe('Automated Test Suite', function() {
  let browser: Browser;
  let page: Page;
  
  before(async function() {
    browser = await chromium.launch({ headless: false });
  });
  
  after(async function() {
    await browser.close();
  });
  
  {{#each testCases}}
  describe('{{name}}', function() {
    beforeEach(async function() {
      const context = await browser.newContext();
      page = await context.newPage();
    });
    
    afterEach(async function() {
      await page.close();
    });
    
    it('should complete successfully', async function() {
      // Arrange - Set up the test environment
      {{#each steps}}
      {{#if (eq action "navigate")}}
      // Navigate to the target page
      await page.goto('{{params.url}}');
      {{/if}}
      {{#if (eq action "click")}}
      // Click on the element
      await page.click('{{params.selector}}');
      {{/if}}
      {{#if (eq action "type")}}
      // Type text into the input field
      await page.fill('{{params.selector}}', '{{params.text}}');
      {{/if}}
      {{#if (eq action "select")}}
      // Select an option from dropdown
      await page.selectOption('{{params.selector}}', '{{params.value}}');
      {{/if}}
      {{#if (eq action "check")}}
      // Check a checkbox
      await page.check('{{params.selector}}');
      {{/if}}
      {{#if (eq action "uncheck")}}
      // Uncheck a checkbox
      await page.uncheck('{{params.selector}}');
      {{/if}}
      {{#if (eq action "hover")}}
      // Hover over an element
      await page.hover('{{params.selector}}');
      {{/if}}
      {{#if (eq action "wait")}}
      // Wait for a condition
      await page.waitForSelector('{{params.selector}}');
      {{/if}}
      {{/each}}
      
      // Assert - Verify the expected outcomes
      {{#each assertions}}
      // {{this}}
      {{/each}}
      
      // Take a screenshot for verification
      await page.screenshot({ path: '{{name}}.png' });
    });
  });
  {{/each}}
});
`;

// BDD JavaScript Template
const mochaBddJavaScriptTemplate = `
const { chromium } = require('playwright');
const { expect } = require('chai');

/**
 * Automated test suite generated by AutoSpectra
 * URL: {{url}}
 * Date: {{date}}
 */

describe('Automated Test Suite', function() {
  let browser;
  let page;
  
  before(async function() {
    browser = await chromium.launch({ headless: false });
  });
  
  after(async function() {
    await browser.close();
  });
  
  {{#each testCases}}
  describe('{{name}}', function() {
    beforeEach(async function() {
      const context = await browser.newContext();
      page = await context.newPage();
    });
    
    afterEach(async function() {
      await page.close();
    });
    
    it('should complete successfully', async function() {
      // Arrange - Set up the test environment
      {{#each steps}}
      {{#if (eq action "navigate")}}
      // Navigate to the target page
      await page.goto('{{params.url}}');
      {{/if}}
      {{#if (eq action "click")}}
      // Click on the element
      await page.click('{{params.selector}}');
      {{/if}}
      {{#if (eq action "type")}}
      // Type text into the input field
      await page.fill('{{params.selector}}', '{{params.text}}');
      {{/if}}
      {{#if (eq action "select")}}
      // Select an option from dropdown
      await page.selectOption('{{params.selector}}', '{{params.value}}');
      {{/if}}
      {{#if (eq action "check")}}
      // Check a checkbox
      await page.check('{{params.selector}}');
      {{/if}}
      {{#if (eq action "uncheck")}}
      // Uncheck a checkbox
      await page.uncheck('{{params.selector}}');
      {{/if}}
      {{#if (eq action "hover")}}
      // Hover over an element
      await page.hover('{{params.selector}}');
      {{/if}}
      {{#if (eq action "wait")}}
      // Wait for a condition
      await page.waitForSelector('{{params.selector}}');
      {{/if}}
      {{/each}}
      
      // Assert - Verify the expected outcomes
      {{#each assertions}}
      // {{this}}
      {{/each}}
      
      // Take a screenshot for verification
      await page.screenshot({ path: '{{name}}.png' });
    });
  });
  {{/each}}
});
`;

// TDD TypeScript Template
const mochaTddTypeScriptTemplate = `
import { Browser, chromium, Page } from 'playwright';
import { expect } from 'chai';
import * as assert from 'assert';

/**
 * Automated test suite generated by AutoSpectra
 * URL: {{url}}
 * Date: {{date}}
 */

let browser: Browser;
let page: Page;

// Set up the test environment
suite('Automated Test Suite', function() {
  
  suiteSetup(async function() {
    browser = await chromium.launch({ headless: false });
  });
  
  suiteTeardown(async function() {
    await browser.close();
  });
  
  setup(async function() {
    const context = await browser.newContext();
    page = await context.newPage();
  });
  
  teardown(async function() {
    await page.close();
  });
  
  {{#each testCases}}
  test('{{name}}', async function() {
    // Arrange - Set up the test environment
    {{#each steps}}
    {{#if (eq action "navigate")}}
    // Navigate to the target page
    await page.goto('{{params.url}}');
    {{/if}}
    {{#if (eq action "click")}}
    // Click on the element
    await page.click('{{params.selector}}');
    {{/if}}
    {{#if (eq action "type")}}
    // Type text into the input field
    await page.fill('{{params.selector}}', '{{params.text}}');
    {{/if}}
    {{#if (eq action "select")}}
    // Select an option from dropdown
    await page.selectOption('{{params.selector}}', '{{params.value}}');
    {{/if}}
    {{#if (eq action "check")}}
    // Check a checkbox
    await page.check('{{params.selector}}');
    {{/if}}
    {{#if (eq action "uncheck")}}
    // Uncheck a checkbox
    await page.uncheck('{{params.selector}}');
    {{/if}}
    {{#if (eq action "hover")}}
    // Hover over an element
    await page.hover('{{params.selector}}');
    {{/if}}
    {{#if (eq action "wait")}}
    // Wait for a condition
    await page.waitForSelector('{{params.selector}}');
    {{/if}}
    {{/each}}
    
    // Assert - Verify the expected outcomes
    {{#each assertions}}
    // {{this}}
    {{/each}}
    
    // Take a screenshot for verification
    await page.screenshot({ path: '{{name}}.png' });
  });
  {{/each}}
});
`;

// TDD JavaScript Template
const mochaTddJavaScriptTemplate = `
const { chromium } = require('playwright');
const { expect } = require('chai');
const assert = require('assert');

/**
 * Automated test suite generated by AutoSpectra
 * URL: {{url}}
 * Date: {{date}}
 */

let browser;
let page;

// Set up the test environment
suite('Automated Test Suite', function() {
  
  suiteSetup(async function() {
    browser = await chromium.launch({ headless: false });
  });
  
  suiteTeardown(async function() {
    await browser.close();
  });
  
  setup(async function() {
    const context = await browser.newContext();
    page = await context.newPage();
  });
  
  teardown(async function() {
    await page.close();
  });
  
  {{#each testCases}}
  test('{{name}}', async function() {
    // Arrange - Set up the test environment
    {{#each steps}}
    {{#if (eq action "navigate")}}
    // Navigate to the target page
    await page.goto('{{params.url}}');
    {{/if}}
    {{#if (eq action "click")}}
    // Click on the element
    await page.click('{{params.selector}}');
    {{/if}}
    {{#if (eq action "type")}}
    // Type text into the input field
    await page.fill('{{params.selector}}', '{{params.text}}');
    {{/if}}
    {{#if (eq action "select")}}
    // Select an option from dropdown
    await page.selectOption('{{params.selector}}', '{{params.value}}');
    {{/if}}
    {{#if (eq action "check")}}
    // Check a checkbox
    await page.check('{{params.selector}}');
    {{/if}}
    {{#if (eq action "uncheck")}}
    // Uncheck a checkbox
    await page.uncheck('{{params.selector}}');
    {{/if}}
    {{#if (eq action "hover")}}
    // Hover over an element
    await page.hover('{{params.selector}}');
    {{/if}}
    {{#if (eq action "wait")}}
    // Wait for a condition
    await page.waitForSelector('{{params.selector}}');
    {{/if}}
    {{/each}}
    
    // Assert - Verify the expected outcomes
    {{#each assertions}}
    // {{this}}
    {{/each}}
    
    // Take a screenshot for verification
    await page.screenshot({ path: '{{name}}.png' });
  });
  {{/each}}
});
`;
